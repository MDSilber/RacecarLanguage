:-) (block comment)
first is some exploratory syntax stuff
then a definition of bubbleSort
(end block comment)
:-(

:) (single-line comment)
:) Make a list of numbers

myNumbers is a list of number

:) keywords: is a --> declaration
:)           list --> list
:)           of --> type is next
:)           number --> the type of the list elements

:) loop index

slot is a number

:) loop

repeat for slot going from 1 to 100

        position slot of myNumbers becomes slot

        :) element access --> position x of <list>
        :) assignment --> becomes

done with repeat

:) done with --> close brace. must specify what you're closing





:) execute function on input

newList is a list of number

newList becomes: do bubbleSort on myNumbers

:-)
        colon (:) means evaluate everything after the colon before processing
        the stuff before the colon.
        equivalent to parentheses from the colon to the end of the line
        and inspired by haskell's $ operator
:-(


show newList

:) show --> print to stdout

:) alternate:

show: do bubbleSort on myNumbers





:) define a function

bubbleSort is a procedure which
        needs a list called toSort
        and gives a list
        and does

        :) procedure --> "function" data type
        :) which --> function's signature comes next
        :) needs --> parameter list
        :) a list --> type of parameter 1
        :) called --> name of parameter 1
        :) (and) gives --> return type
        :) (and) does --> function implementation next

        toSortLength is a number
        toSortLength becomes do length on toSort

        isSwapped is a boolean
        isSwapped becomes false

        repeat while isSwapped is false
                
                :) variable definitions

                slot is a number
                slot becomes 1

                repeat for slot going from 1 to: toSortLength - 1

                        currentSlot is a number
                        currentSlot becomes position slot of toSort

                        nextSlot is a number
                        nextSlot becomes position slot + 1 of toSort

                        if currentSlot > nextSlot then
                                :) swap

                                swapTemp is a number
                                swapTemp becomes nextSlot

                                position slot + 1 of toSort becomes currentSlot

                                position slot of toSort becomes swapTemp

                                swapped becomes true

                        done with if

                done with repeat

        done with repeat

        give toSort

done with procedure
