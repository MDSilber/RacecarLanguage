A grammar for Racecar

program : statements

statements : statements statement
      | epsilon

statement : drive_cmd
     | steer_cmd
     | make_cmd
     | repeat_if_cmd
     | repeat_times_cmd
     | if_cmd
     | print_cmd
     | declaration_cmd
     | assignment_cmd
     | function_call_cmd

expression : number_expression
           | word_expression
           | bool_expression

number_expression : number_expression '+' term
                  | number_expression '-' term
                  | term

term : term '*' factor
     | term '/' factor
     | factor

factor : '(' number_expression ')'
       | NUMBER
       | ID

word_expression : word_expression '+' word_term
                | word_term

word_term : WORD
          | ID

bool_expression : bool_expression OR and_expr
                | and_expr

and_expr : and_expr AND not_expr
         | not_expr

not_expr : NOT not_expr
         | bool_factor

bool_factor : '(' bool_expression ')'
            | comparison

comparison : comparison bool_operator bool_term
           | bool_term

bool_term : TRUE
          | FALSE
          | ID

bool_operator : IS | IS_NOT | NOT | GT | LT | GEQ | LEQ

drive_cmd : DRIVE drive_dir_enum number_or_var opt_steps

drive_dir_enum : FORWARD
         | FORWARDS
         | BACKWARD
         | BACKWARDS

number_or_var : NUMBER
              | ID

opt_steps : STEP
          | STEPS
          | epsilon

steer_cmd : STEER steer_dir_enum

steer_dir_enum : LEFT
               | RIGHT
               | STRAIGHT

make_cmd : MAKE ID opt_param_list '{' statements '}'

opt_param_list : epsilon
               | USING ID '(' type_enum ')' opt_extra_params

opt_extra_params : epsilon
                 : AND ID '(' type_enum ') opt_extra_params

type_enum : NUMBER_TYPE
          | WORD_TYPE

repeat_if_cmd : REPEAT IF bool_expr '{' statements '}'

repeat_times_cmd : REPEAT number_or_var TIMES '{' statements '}'

if_cmd : IF bool_expr '{' statements '}' opt_else_if opt_else

opt_else_if : opt_else_if ELSE IF bool_expr '{' statements '}'
            | epsilon

opt_else : ELSE '{' statements '}'
         | epsilon

print_cmd : PRINT word_expression

declaration_cmd : ID IS A type_enum

assignment_cmd : SET ID TO expression
