/* steer around edge of the map */

import RaceCarApp as rc

void steer(int direction)
{
	/* North + left = West
	   North + right = East
	   West + right = North
	   West + left = South
	   East + left = North
	   East + right = South
	   South + left = East
	   South + right = West
	   
	*/

	switch(direction)
	{
		case left: 
			car.direction += left;
			break;
		case right:
			car.direction += right;
			break;
		case straight:
			car.direction;
			break;
		default
			; // Error
	}
}
void drive(int direction, int steps)
{
	if(direction == "backward")
		car.direction + right + right;

	if(car.direction = NORTH)
		car.y += steps;
	else if(car.direction = SOUTH)
	{
		car.y -= steps;
	}
	else if(car.direction = WEST)
	{
		car.x -= steps;
	}
	else if(car.direction = EAST)
	{
		car.x += steps;
	}
}

void turn(int direction)
{
	switch(direction)
	{
		case left: 
			steer(left);
			drive(forward);
			steer(forward);
			break;
		case right:
			steer(right);
			drive(forward);
			steer(forward);
		default
			; // Error
	}
}

struct pos
{
	int x;
	int y;
};

// library function checking a position within map
boolean can_move(int direction)
{
	pos temp;
	temp.x = car.getposition();
	temp.y = car.getposition();
	
	if(car.direction = NORTH)
		temp.y += steps;
	else if(car.direction = SOUTH)
	{
		temp.y -= steps;
	}
	else if(car.direction = WEST)
	{
		temp.x -= steps;
	}
	else if(car.direction = EAST)
	{
		temp.x += steps;
	}
	
	if(temp contained in map)
		return true;
	else
		return false;
}

void main()
{
	/* assuming car is placed in the center of the map */
	Car = rc.Car();
	
	
	/* go  to the edge of the board (left side) */
	if(can_move(left) == true)
		turn(left);
	while(can_move(forward) == true)
	{
		drive(forward, 1);
	}
	pos original_position = car.getPosition();
	
	/* begin to go around the board */
	if(can_move(left) == true)
	{
		turn(left);
		move_south(original_position);
	}
	else if(can_move(right) == true)
	{
		turn(right);
		move_north(original_position);
	}
	else
	{
		drive(backwards, 1);
		move_east(original_position);
	}
}



void move_north(pos original_position)
{
	if(car.getposition().x == original_position.x && car.getposition().y == original_position())
	{
		return ;
	}

	if(can_move(left) == false)
	{
		if(can_move(straight) == true)
		{
			drive(forward, 1);
			move_north(original_position);
		}
		else
		{
			if(can_move(right) == true)
			{
				turn(right);
				move_east(original_position);
			}
			else
			{
				drive(backward,1);
				move_south(original_position);
			}
		}
	}
	else
	{
		turn(left);
		move_west(original_position);
	}
}

void move_east(pos original_position)
{
	if(car.getposition().x == original_position.x && car.getposition().y == original_position())
	{
		return ;
	}

	if(can_move(left) == false)
	{
		if(can_move(straight) == true)
		{
			drive(forward,1);
			move_east(original_position);
		}
		else
		{
			if(can_move(right) == true)
			{
				turn(right);
				move_south(original_position);
			}
			else
			{
				drive(backward, 1);
				move_west(original_position);
			}	
		}
	}
	else
	{
		turn(left);
		move_north(original_position);
	}
}

void move_south(pos original_position,int distance_traveled)
{
	if(car.getposition().x == original_position.x && car.getposition().y == original_position())
	{
		return ;
	}

	if(can_move(left) == false)
	{
		if(can_move(straight) == true)
		{
			drive(forward, 1);
			move_south(original_position);
		}
		else
		{
			if(can_move(right) == true)
			{
				turn(right);
				move_west(original_position);
			}
			else
			{
				drive(backward, 1);
				move_north(original_position);
			}
		}
	}
	else
	{
		turn(left);
		move_east(original_position);
	}
}

void move_west(pos original_position,int distance_traveled)
{
	if(car.getposition().x == original_position.x && car.getposition().y == original_position())
	{
		return ;
	}

	if(can_move(left) == false)
	{
		if(can_move(straight) == true)
		{
			drive(forward, 1);
			move_west(original_position);
		}
		else
		{
			if(can_move(right) == true)
			{
				turn(right);
				move_north(original_position);
			}
			else
			{
				drive(backward, 1);
				move_east(original_position);
			}
		}
	}
	else
	{
		turn(left);
		move_south(original_position);
	}
}